-- Drop existing tables (order matters due to FK constraints)
DROP TABLE IF EXISTS statements;
DROP TABLE IF EXISTS payments;
DROP TABLE IF EXISTS property_owners;
DROP TABLE IF EXISTS real_estate_agencies;
DROP TABLE IF EXISTS accounts;

-- Create accounts table
CREATE TABLE accounts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    balance NUMERIC(38,2),
    name VARCHAR(255),
    type VARCHAR(50) CHECK (type IN ('PLATFORM_REVENUE','PROPERTY_OWNER','REAL_ESTATE_AGENCY'))
);

-- Create real_estate_agencies table
CREATE TABLE real_estate_agencies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    fee_percentage NUMERIC(38,2),
    account_id BIGINT,
    CONSTRAINT fk_agency_account FOREIGN KEY (account_id) REFERENCES accounts(id)
);

-- Create property_owners table
CREATE TABLE property_owners (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    account_id BIGINT,
    real_estate_agency_id BIGINT,
    CONSTRAINT fk_owner_account FOREIGN KEY (account_id) REFERENCES accounts(id),
    CONSTRAINT fk_owner_agency FOREIGN KEY (real_estate_agency_id) REFERENCES real_estate_agencies(id)
);

-- Create payments table
CREATE TABLE payments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    external_reference VARCHAR(255) UNIQUE NOT NULL,
    amount NUMERIC(38,2),
    property_owner_id BIGINT,
    real_estate_agency_id BIGINT,
    status VARCHAR(20) CHECK (status IN ('PENDING','COMPLETED','FAILED')),
    created_at TIMESTAMP(6),
    CONSTRAINT fk_payment_owner FOREIGN KEY (property_owner_id) REFERENCES property_owners(id),
    CONSTRAINT fk_payment_agency FOREIGN KEY (real_estate_agency_id) REFERENCES real_estate_agencies(id)
);

-- Create statements table
CREATE TABLE statements (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    payment_id BIGINT,
    account_id BIGINT,
    amount NUMERIC(38,2),
    description VARCHAR(255),
    created_at TIMESTAMP(6),
    CONSTRAINT fk_statement_payment FOREIGN KEY (payment_id) REFERENCES payments(id),
    CONSTRAINT fk_statement_account FOREIGN KEY (account_id) REFERENCES accounts(id)
);

-- Create indexes for better performance
CREATE INDEX idx_payment_external_ref ON payments(external_reference);
CREATE INDEX idx_statement_payment_id ON statements(payment_id);
CREATE INDEX idx_statement_account_id ON statements(account_id);